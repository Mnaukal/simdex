# This baseline configuration uses duration predictor with oracle that can guess the exact duration of a job.
# The oracle is implemented by cheating, the estimate is taken from job.duration which should
# not be accessed in dispatching in regular experiments.
# The purpose of this configuration is to measure performance of the theoretical optimum as a reference point.

# Workers could be either a number or a list that explicitly states a collection of attributes.
# If only a number is given, the workers are initialized with no attributes at the beginning.
# We want all the workers to be 'active'
workers:
  - active: true # one worker dedicated to short jobs only
    limit: 30.0
  - active: true
  - active: true
  - active: true

# Dispatcher component: either a string (fully qualified class name) or a collection with { class, args }
# where class is fully qualified class name and args is list or dict holding constructor arguments.
# The class should implement the `AbstractDispatcher` interface
dispatcher: dispatchers.DurationFilterDispatcher

# Duration predictor: same format as the dispatcher.
# The class should implement the `AbstractDurationPredictor` interface
duration_predictor: duration_predictors.oracle_duration_predictor.OracleDurationPredictor

# list of metric components (each one is in the same format as dispatcher)
metrics:
  - metrics.default.JobDelayMetricsCollector
  - metrics.quantile.JobDelayQuantilesCollector
  - class: metrics.user_experience.UserExperienceMetricsCollectorWithHistory
    args:
      ref_jobs: "@@ref_jobs"
      thresholds: [ 1.5, 3.0 ]
#      history_step: 10_000
      history_step: 100_000
#      print_progress: True
