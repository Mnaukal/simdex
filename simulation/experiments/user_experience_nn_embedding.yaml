# This configuration uses a neural-network regression estimator for the duration predictor.
# The NN is trained in batches of incoming jobs as the simulation progresses.
# Before the simulation starts, the embedding layer is trained on the appropriate data which
# can be generated using the `/data/exercise_tlgroup.py` script.

# Workers could be either a number or a list that explicitly states a collection of attributes.
# If only a number is given, the workers are initialized with no attributes at the beginning.
# We want all the workers to be 'active'
workers:
  - active: true # one worker dedicated to short jobs only
    limit: 30.0
  - active: true
  - active: true
  - active: true

# Dispatcher component: either a string (fully qualified class name) or a collection with { class, args }
# where class is fully qualified class name and args is list or dict holding constructor arguments.
# The class should implement the `AbstractDispatcher` interface
dispatcher: dispatchers.DurationFilterDispatcher

# Duration predictor: same format as the dispatcher.
# The class should implement the `AbstractDurationPredictor` interface.
# Detailed description of the architecture of the `NNDurationPredictor` is available in the paper.
duration_predictor:
  class: duration_predictors.nn_embedding_duration_predictor.NNEmbeddingDurationPredictor
  args:
    layer_widths: [ 512, 256 ]  # each value represents a width of one hidden layer
    training_interval: 500  # how often to train (in number of jobs)
    batch_size: 1000  # training batch size (most recent jobs)
    training_epochs: 5  # number of epochs in each training
    hash_converters: "@@hash_converters"
    embedding_training_data: "../data/release02-2023-01-04/exercise_tlgroup.csv"  # embeddings training data generated by the `/data/exercise_tlgroup.py` script
    embedding_dim: 100  # size of the embeddings
    embedding_batch_size: 5000  # batch size for embeddings training
    embedding_training_epochs: 100  # number of epochs to train the embeddings


# list of metric components (each one is in the same format as dispatcher)
metrics:
  - metrics.default.JobDelayMetricsCollector
  - metrics.quantile.JobDelayQuantilesCollector
  - class: metrics.user_experience.UserExperienceMetricsCollectorWithHistory
    args:
      ref_jobs: "@@ref_jobs"
      thresholds: [ 1.5, 3.0 ]
#      history_step: 10_000
      history_step: 100_000
#      print_progress: True
